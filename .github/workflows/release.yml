on:
  push:
    branches:
      - main
name: release
jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release-please.outputs.releases_created }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release-please
        with:
          release-type: node
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  get-release:
    needs: release-please
    if: ${{ needs.release-please.outputs.releases_created }}
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.get-last-release.outputs.result }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - id: get-last-release
        name: Get last release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: `v${process.env.PACKAGE_VERSION}`
            })
            return data.id
  build-tauri:
    needs: get-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          # only macos does not already have the correct rust installed
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
      - name: use correct bundle version (mac)
        if: matrix.platform == 'macos-latest'
        run: jq -r '.version' package.json > version.txt && jq --arg version "$(cat version.txt)" '.package.version = $version' src-tauri/tauri.conf.json > tmp && mv tmp src-tauri/tauri.conf.json
      - name: use correct bundle version (windows)
        if: matrix.platform == 'windows-latest'
        run: jq -r '.version' package.json > version.txt && jq --arg version "$(type version.txt)" '.package.version = $version' src-tauri/tauri.conf.json > tmp && mv -Force tmp src-tauri/tauri.conf.json
      - name: install app dependencies and build it
        run: yarn && yarn tauri build
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.get-release.outputs.release_id }}